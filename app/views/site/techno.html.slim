#content.container
  .hero-unit
    .ac
      h1 Explore features!
      p This is a template for a simple features page.
  #explore
    .row
      .span12
        ul.the-icons
          li data-title="Some title" rel="tooltip"
            i.icon-search
          li data-title="Some title" rel="tooltip"
            i.icon-envelope
          li data-title="Some title" rel="tooltip"
            i.icon-heart
          li data-title="Some title" rel="tooltip"
            i.icon-star
          li data-title="Some title" rel="tooltip"
            i.icon-user
          li data-title="Some title" rel="tooltip"
            i.icon-ok
          li data-title="Some title" rel="tooltip"
            i.icon-remove
          li data-title="Some title" rel="tooltip"
            i.icon-zoom-in
          li data-title="Some title" rel="tooltip"
            i.icon-signal
          li data-title="Some title" rel="tooltip"
            i.icon-cog
          li data-title="Some title" rel="tooltip"
            i.icon-home
          li data-title="Some title" rel="tooltip"
            i.icon-time
          li data-title="Some title" rel="tooltip"
            i.icon-road
          li data-title="Some title" rel="tooltip"
            i.icon-inbox
          li data-title="Some title" rel="tooltip"
            i.icon-refresh
    hr/
    .row
      .span8
        h3 Feature Oriented Programming
        p
          | FOSD arose out of layer-based designs and levels of abstraction in network protocols and extensible database systems in the late-1980s [1].
        p
          | A program was a stack of layers. Each layer added functionality to previously composed layers and different compositions of layers produced different programs. Not surprisingly, there was a need for a compact language to express such designs. Elementary algebra fit the bill: each layer was function (program transformation) that added new code to an existing program to produce a new program, and a program's design was modeled by an expression, i.e., a composition of transformations (layers). The figure below illustrates the stacking of layers h, j, and i (where h is on the bottom and i is on the top).
      .span4
        p
          img.thumbnail.fr alt="" rel="tooltip" src="http://image.shutterstock.com/display_pic_with_logo/562921/99568811/stock-photo-mouse-connections-99568811.jpg" title="Some title" width="240"
    hr/
    .row
      .span3
        p
          img.thumbnail alt="" rel="tooltip" src="http://image.shutterstock.com/display_pic_with_logo/183487/183487,1306438770,2/stock-vector-social-network-background-with-media-icons-78037456.jpg" title="Some title" width="200"
      .span9
        h3 Feature Oriented Programming
        p
          | FOSD arose out of layer-based designs and levels of abstraction in network protocols and extensible database systems in the late-1980s [1].
        p
          | A program was a stack of layers. Each layer added functionality to previously composed layers and different compositions of layers produced different programs. Not surprisingly, there was a need for a compact language to express such designs. Elementary algebra fit the bill: each layer was function (program transformation) that added new code to an existing program to produce a new program, and a program's design was modeled by an expression, i.e., a composition of transformations (layers). The figure below illustrates the stacking of layers h, j, and i (where h is on the bottom and i is on the top).
    hr/
    .row
      .span8
        h3 Feature Oriented Programming
        p
          | FOSD arose out of layer-based designs and levels of abstraction in network protocols and extensible database systems in the late-1980s [1].
        p
          | A program was a stack of layers. Each layer added functionality to previously composed layers and different compositions of layers produced different programs. Not surprisingly, there was a need for a compact language to express such designs. Elementary algebra fit the bill: each layer was function (program transformation) that added new code to an existing program to produce a new program, and a program's design was modeled by an expression, i.e., a composition of transformations (layers). The figure below illustrates the stacking of layers h, j, and i (where h is on the bottom and i is on the top).
      .span4
        p
          img.thumbnail.fr alt="" rel="tooltip" src="http://image.shutterstock.com/display_pic_with_logo/368671/368671,1296679547,7/stock-photo-background-image-of-d-70345660.jpg" title="Some title" width="240"
    hr/
    .well.ac
      h3
        | Start right now! 
        a href="/price" title="Try it for yourself."
            | Sign up &rarr;